#!/usr/bin/env node

/**
 * Module dependencies.
 */

var { app, redirectApp } = require('../app');
var debug = require('debug')('coincove-ui-2-api:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var dotenv = require('dotenv');
var logger = require('../logger');

/*
 * Load environment variables
 */
dotenv.config(); 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Setting HTTP (and HTTPS) server
 */

var server;

if (process.env.NODE_ENV == 'production') {

  // Creating HTTPS server
  server = https.createServer({
    key: fs.readFileSync(process.env.TLS_KEY),
    cert: fs.readFileSync(process.env.TLS_CERT)
  }, app);
  
  // Creating a HTTP server to redirect to HTTPS
  const httpServer = http.createServer(redirectApp);
  httpServer.listen(normalizePort(process.env.REDIRECTION_PORT || 80));
  httpServer.on('error', onError);
  httpServer.on('listening', () => 
    logger.info(`Redirection listening on port ${httpServer.address().port}`)
  );

} else {

  server = http.createServer(app);

}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info('Listening on ' + bind);
}
